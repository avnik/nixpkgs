#! /bin/sh -e

usage(){
    echo  >&2 "syntax: nix-prefetch-$site [OPTIONS] [OWNER REPO REV [EXPECTED-HASH]]

Options:
      --owner       owner       The owner of the repo to fetch.
      --ewpo        repo        The repo to fetch from.
      --revision    revision    The revision to fetch.
      --site        site        The site to take repo snapshot from: github, gitlab, repoorcz, savannah (only git), gitorious, bitbucket (defaults to $site)
      --name        name        The name to use for the store path (defaults to \`basename \$url\`).
      --hash        hash        The hash of unpacked archive.
      --hash-type   type        Use the specified cryptographic hash algorithm, which can be one of md5, sha1, and sha256.
      --leave-root              Keep the root directory of the archive.
      --url         url         Try to parse this URL and set the options accordingly. (experimental. Will ask you for confirmation)
      --help                    Show this help text.
"
    exit 1
}

site="$(basename $0 | sed 's,\-wrapped,,; s,\.*nix\-prefetch\-,,')"
leaveRoot=""
name=""
argi=0
argfun=""
url=""

# Setter functions for variables
set_owner()     { owner=$1; }
set_repo()      { repo=$1; }
set_rev()       { rev=$1; }
set_site()      { site=$1; }
set_name()      { name=$1; }
set_expHash()   { expHash=$1; }
set_hashType()  { hashType=$1; }
set_url()       { url=$1; }

for arg; do
  if test -z "$argfun"; then
    case $arg in
      --owner)      argfun=set_owner;;
      --repo)       argfun=set_repo;;
      --revision)   argfun=set_rev;;
      --site)       argfun=set_site;;
      --name)       argfun=set_name;;
      --hash)       argfun=set_expHash;;
      --hash-type)  argfun=set_hashType;;
      --leave-root) leaveRoot="--leave-root";;
      --url)        argfun=set_url;;

      --help)       usage;;
      --*)          usage;;

      *) argi=$(($argi + 1))
         case $argi in
           1) owner=$arg;;
           2) repo=$arg;;
           3) rev=$arg;;
           4) expHash=$arg;;
           *) echo "Unexpected argument: $arg" >&2
              usage
              ;;
         esac
         ;;
    esac
  else
    case $argfun in
      set_*)
        $argfun $arg
        ;;
    esac
    argfun=""
  fi
done

#
#
# Parser functions for parsing urls
#
# Note:
#  These functions MUST return three space seperated values:
#
#       <owner> <repo> <rev>
#
#  If, for example, the owner cannot be parsed (as with savannah), there MUST be
#  leading spaces so the parsing of the return works.
#
#

github_parse_url() {
  local AZ="[a-zA-Z0-9_\-]*"
  local REV="[a-zA-Z0-9_\-\.]*"
  local EXT="(tar\.gz|tar|zip)"
  echo $1 | \
      sed -r "s,(https://)?github\.com/($AZ)/($AZ)(/archive/($REV)\.$EXT)?,\2 \3 \5,"
}

bitbucket_parse_url() {
  local AZ="[a-zA-Z0-9_\-]*"
  local REV="[a-zA-Z0-9_\-\.]*"
  local EXT="(tar\.gz|tar|zip)"
  echo $1 | \
      sed -r "s,(https://)?bitbucket.org/($AZ)/($AZ)(/get/($REV).$EXT)?,\2 \3 \5,"
}

gitorious_parse_url() {
  local AZ="[a-zA-Z0-9_\-]*"
  local REV="[a-zA-Z0-9_\-\.]*"
  local EXT="(tar\.gz|tar|zip)"
  echo $1 | \
      sed -r "s,(https://)?gitorious.org/($AZ)/($AZ)(/archive/($REV).$EXT)?,\2 \3 \5,"
}

savannah_parse_url() {
  local AZ="[a-zA-Z0-9_\-]*"
  local REV="[a-zA-Z0-9_\-\.]*"
  local EXT="(tar\.gz|tar|zip)"
  echo $1 | \
      sed -r "s,(http://)?git.savannah.gnu.org/cgit/($AZ).git/snapshot/($AZ)-($REV).$EXT,  \2 \4,"
}

repoorcz_parse_url() {
  savannah_parse_url "$1" # works exactly the same
}

gitlab_parse_url() {
  local AZ="[a-zA-Z0-9_\-]*"
  local REV="[a-zA-Z0-9_\-\.]*"
  local EXT="(tar\.gz|tar|zip)"
  echo $1 | \
      sed -r "s,(https://)?gitlab.com/($AZ)/($AZ)/repository/archive.tar.gz?ref=($REV),\2 \3 \4,"
}

#
# To confirm a variable
# Arguments:
#   1) Name of the variable
#   2) Value of the variable
#
confirm_variable() {
	local answer
  local scriptname="$(basename $0 | sed 's,\-wrapped,,')"
	echo -ne "${scriptname}: Variable correct? $1 = '$2' [yN]? "
	read answer; echo

	if [[ ! "${answer}" =~ ^[Yy]$ ]]
  then
    echo "Variable not correct. Aborting script"
    exit 1
  fi
}

if [[ ! -z "$url" ]]
then
    # trying to parse URL to set the options

    for _site in github bitbucket gitorious savannah repoorcz gitlab
    do
      if [[ $(echo "$url" | grep $_site) ]]
      then
        site=$_site
        break
      fi
    done

    site_vars="$(${site}_parse_url "$url")"

    owner=$(echo $site_vars | cut -d " " -f 1)
    repo=$( echo $site_vars | cut -d " " -f 2)
    rev=$(  echo $site_vars | cut -d " " -f 3)

    confirm_variable owner "$owner"
    confirm_variable repo  "$repo"
    confirm_variable rev   "$rev"
fi

case "$site" in
  "github")     url="https://github.com/${owner}/${repo}/archive/${rev}.tar.gz" ;;
  "bitbucket")  url="https://bitbucket.org/${owner}/${repo}/get/${rev}.tar.gz" ;;
  "gitorious")  url="https://gitorious.org/${owner}/${repo}/archive/${rev}.tar.gz";;
  "savannah")   url="http://git.savannah.gnu.org/cgit/${repo}.git/snapshot/${repo}-${rev}.tar.gz";;
  "repoorcz")   url="http://git.savannah.gnu.org/cgit/${repo}.git/snapshot/${repo}-${rev}.tar.gz";;
  "gitlab")     url="https://gitlab.com/${owner}/${repo}/repository/archive.tar.gz?ref=${rev}";;
  *)
    echo "Error: unknown --site $site given" >&2
    usage
    ;;
esac

missing() {
    echo "--$1 not specified" >&2
    usage
}

[[ -z "$repo"       ]] && missing repo
[[ -z "$owner"      ]] && missing owner
[[ -z "$rev"        ]] && missing revision
[[ -z "$name"       ]] && name="$repo-$rev-src"
[[ -z "$hashType"   ]] && hashType=sha256

exec nix-prefetch-zip --url "$url" --name "$name" --hash "$expHash" --hash-type "$hashType" $leaveRoot
